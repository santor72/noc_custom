# -*- coding: utf-8 -*-
# ----------------------------------------------------------------------
# Zabbix Extractors
# ----------------------------------------------------------------------
# Copyright (C) 2007-2018 The NOC Project
# See LICENSE for details
# ----------------------------------------------------------------------

# Python modules
import requests
from requests.auth import HTTPDigestAuth
import json
from pprint import pprint
import re
import csv
import os
import argparse

# NOC modules
from noc.sa.models.managedobject import ManagedObject
from noc.main.models.remotesystem import RemoteSystem
from noc.core.management.base import BaseCommand
from noc.core.mongo.connection import connect
from noc.sa.models.action import Action
import cPickle  as pickle
headers = {'Content-type': 'application/json'}

class Command(BaseCommand):
    def help(self):
        print("--olt - olt id in Userside")
        print("-f --file - outputfile")

    def getusdata(self):
        self.us = RemoteSystem.objects.get(name = 'RNUserside')
        self.url = self.us.config.get("apiurl", None)
        self.url_rn = self.us.config.get("apiurl_rn", None)
        self.apikey = self.us.config.get("apikey", None)
        self.apiurl = self.url + self.apikey
        self.apiurl_rn = self.url_rn + 'key='+ self.apikey

    def add_arguments(self, parser):
        parser.add_argument("-o", "--olt", dest="olt", default=None)
        parser.add_argument("-f", "--file", dest="file", default=None)
    
    def handle(self, *args, **options):
        connect()
        self.olt_id = options.get("olt")
        fname = options.get("file")
        if (not self.olt_id):
            self.help()
            return
        self.getusdata()
        self.olt =  ManagedObject.objects.get(id=self.olt_id)
        res = self.getonulist()
        pprint(res)
        if fname:
            with open(fname,'wb') as f:
                pickle.dump(res,f)
            f.close()

        
    def getonulist(self):
#        r = self.apiurl_rn + '&cat=usm_pon&action=list_onu&device_id={}'.format(self.olt_id)
#        response = requests.get(r,verify=True, headers=headers)
#        if (response.ok):
#            data = json.loads(response.content)
#        else:
#            response.raise_for_status()
        data_dict = {'interface' : '',
                'llid' : '',
                'sn' : '',
                'conftype' : '',
                'distance' : '',
                'lprofile' : '',
                'sprofile' : '',
                'rstate' : '',
                'state' : '',
                'version' : '',
                'model' : '',
                'oltrx' : '',
                'downatt' : '',
                'onutx' : '',
                'upatt' : '',
                'username' : '',
                'mac': '',
                'vlan': ''
        }
        action = Action.objects.get(name='showonu')
        data = self.olt.scripts.commands(commands= [str(action.expand(self.olt))])
        l = []
        rx_onu = re.compile(r'^gpon-onu_(?P<interface>\d/\d/\d):(?P<llid>\d{1,3}).+$',  re.MULTILINE | re.IGNORECASE)
        rx_onu2 = re.compile(r'^(?P<interface>\d/\d/\d):(?P<llid>\d{1,3}).+$',  re.MULTILINE | re.IGNORECASE)
        rx_onuinfo = re.compile('^.+Type:\s+(?P<conftype>\S+)\s+State:\s+(?P<state>\S+)\s.+'
                r'Phase\sstate:\s+(?P<rstate>\S+)\s.+'
                r'Serial\snumber:\s+(?P<sn>\S+)\s+.+Password.+Line\sProfile:\s+(?P<lprofile>\S+)\s+'
                r'Service\s+Profile:\s+(?P<sprofile>\S+)\s+.+ONU\s+Distance:\s+(?P<distance>\S+)\s+.+$',
                re.DOTALL | re.MULTILINE | re.IGNORECASE)

        rx_onuinfo2 = re.compile(r'^.+Version:\s+(?P<version>\S+)\s+SN.+Model:\s+(?P<model>\S+)\s+.+$',
                re.DOTALL | re.MULTILINE | re.IGNORECASE)
        rx_power2 = re.compile(r'^.+up\s+Rx\s+:(?P<otlrx>\S+)\(dbm\).+\(dbm\)\s+(?P<downatt>\S+)\(dB\).+'
                               r'down\s+Tx.+Rx:(?P<onurx>\S+)\(dbm\)\s+(?P<upatt>\S+)\(dB\).+$',
                               re.DOTALL | re.MULTILINE | re.IGNORECASE)
        rx_username = re.compile(r'^.+(?:pppoe|wan-ip).+(?:user|username)\s+(?P<username>\S+)\s+.+$',
                                 re.DOTALL | re.MULTILINE | re.IGNORECASE)
        rx_mac = re.compile(r'Mac\s+address\s+Vlan\s+Type\s+Port\s+Vc\n.+\n([a-f,0-9]+.[a-f,0-9]+.[a-f,0-9]+)\s+(\d+)\s+',
                                 re.DOTALL | re.MULTILINE | re.IGNORECASE)
        #pprint(data['output'][0].split('\n'))
        for i in data['output'][0].split('\n'):

            m = rx_onu.search(i)
            if not m:
               m = rx_onu2.search(i)
            if m:
#                print(i)
                print(m.group('interface') + m.group('llid'))
                action = Action.objects.get(name='showonuinfo')
                data2 = self.olt.scripts.commands(commands= ['sho gpon onu detail-info gpon-onu_{}:{}'.format(m.group('interface'),m.group('llid'))])
                data3 = self.olt.scripts.commands(commands= ['show pon power att gpon-onu_{}:{}'.format(m.group('interface'),m.group('llid'))])
                data4 = self.olt.scripts.commands(commands= ['sho gpon remote-onu equip gpon-onu_{}:{}'.format(m.group('interface'),m.group('llid'))])
                data5 = self.olt.scripts.commands(commands= ['sho onu run con  gpon-onu_{}:{}'.format(m.group('interface'),m.group('llid'))])
                data6 = self.olt.scripts.commands(commands= ['show mac gpon onu gpon-onu_{}:{}'.format(m.group('interface'),m.group('llid'))])
                onu_data = data_dict.copy()
                interface = ''
                llid = ''
                sn = ''
                conftype = ''
                distance = ''
                lprofile = ''
                sprofile = ''
                rstate = ''
                state = ''
                version = ''
                model = ''
                oltrx = ''
                downatt = ''
                onutx = ''
                upatt = ''
                username = ''
                mac= ''
                vlan= ''
                interface =  m.group('interface')
                llid = m.group('llid')
                m1 = rx_onuinfo.search(data2['output'][0])
                if m1:
                    conftype = m1.group('conftype'),
                    sn = m1.group('sn'),
                    distance = m1.group('distance'),
                    lprofile = m1.group('lprofile'),
                    sprofile = m1.group('sprofile'),
                    rstate = m1.group('rstate'),
                    state = m1.group('state'),
                m4 = rx_onuinfo2.search(data4['output'][0])
                if m4:
                    version =  m4.group('version'),
                    model = m4.group('model')
#                print('start')
#                pprint([str(action.expand(self.olt, llid=m.group('llid'),interface=m.group('interface') ))])
#                pprint(data2['output'])
#                print('end')
                m2 = rx_power2.search(data3['output'][0])
                if m2:
                    print(m2.groups())
                    oltrx = m2.group(1),
                    downatt = m2.group(2),
                    onutx = m2.group(3),
                    upatt = m2.group(4)
                m5 = rx_username.search(data5['output'][0])
                if m5:
                    print(m5.groups())
                    username = m5.group(1),
                m6 = rx_mac.search(data6['output'][0])
                if m6:
                    print(m6.groups()[0])
                    mac = m6.group(1),
                    vlan = m6.group(2)
                l.append([interface,llid,
                         ''.join(sn),
                         ''.join(conftype),
                         ''.join(distance),
                         ''.join(lprofile),
                         ''.join(sprofile),
                         ''.join(rstate),
                         ''.join(state),
                         ''.join(version),
                         ''.join(model),
                         ''.join(oltrx), 
                         ''.join(downatt),
                         ''.join(onutx),
                         ''.join(upatt),
                         ''.join(username),
                         ''.join(mac),
                         ''.join(vlan)
                ]
               )
        return l



if __name__ == "__main__":
    Command().run()
